<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite hostname="DESKTOP-6O8T6P5" failures="1" tests="60" name="Test" time="1.548" errors="0" timestamp="18 Oct 2022 12:06:20 GMT">
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <failure type="java.lang.NullPointerException" message="Cannot invoke &amp;quot;com.aventstack.extentreports.ExtentReports.createTest(String)&amp;quot; because &amp;quot;testCases.register.extent&amp;quot; is null">
      <![CDATA[java.lang.NullPointerException: Cannot invoke "com.aventstack.extentreports.ExtentReports.createTest(String)" because "testCases.register.extent" is null
	at testCases.register.beforeMethod(register.java:52)
... Removed 26 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.register" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.register" name="@AfterMethod aftermethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod aftermethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <failure type="java.lang.NullPointerException" message="Cannot invoke &amp;quot;com.aventstack.extentreports.ExtentReports.createTest(String)&amp;quot; because &amp;quot;testCases.loginTest.extent&amp;quot; is null">
      <![CDATA[java.lang.NullPointerException: Cannot invoke "com.aventstack.extentreports.ExtentReports.createTest(String)" because "testCases.loginTest.extent" is null
	at testCases.loginTest.beforeMethod(loginTest.java:49)
... Removed 26 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.loginTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testCases.loginTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <failure type="java.lang.NullPointerException" message="Cannot invoke &amp;quot;com.aventstack.extentreports.ExtentReports.createTest(String)&amp;quot; because &amp;quot;testCases.homepageTest.extent&amp;quot; is null">
      <![CDATA[java.lang.NullPointerException: Cannot invoke "com.aventstack.extentreports.ExtentReports.createTest(String)" because "testCases.homepageTest.extent" is null
	at testCases.homepageTest.before(homepageTest.java:42)
... Removed 26 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.homepageTest" name="@BeforeMethod before" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod before -->
  <testcase classname="testCases.homepageTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <failure type="java.lang.NullPointerException" message="Cannot invoke &amp;quot;com.aventstack.extentreports.ExtentReports.createTest(String)&amp;quot; because &amp;quot;testCases.ReactAndNodejsCourseTest.extent&amp;quot; is null">
      <![CDATA[java.lang.NullPointerException: Cannot invoke "com.aventstack.extentreports.ExtentReports.createTest(String)" because "testCases.ReactAndNodejsCourseTest.extent" is null
	at testCases.ReactAndNodejsCourseTest.beforemethod(ReactAndNodejsCourseTest.java:53)
... Removed 26 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@BeforeMethod beforemethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforemethod -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testCases.register" name="clickOnLogo" time="0.001">
    <skipped/>
  </testcase> <!-- clickOnLogo -->
  <testcase classname="testCases.register" name="checkTitle" time="0.002">
    <skipped/>
  </testcase> <!-- checkTitle -->
  <testcase classname="testCases.register" name="checkUrl" time="0.001">
    <skipped/>
  </testcase> <!-- checkUrl -->
  <testcase classname="testCases.register" name="check_Signin_Link" time="0.002">
    <skipped/>
  </testcase> <!-- check_Signin_Link -->
  <testcase classname="testCases.register" name="check_I_already_have_account_Link" time="0.003">
    <skipped/>
  </testcase> <!-- check_I_already_have_account_Link -->
  <testcase classname="testCases.register" name="check_terms_of_use_Link" time="0.001">
    <skipped/>
  </testcase> <!-- check_terms_of_use_Link -->
  <testcase classname="testCases.register" name="check_CustomerPrivacyPolicy_Link" time="0.004">
    <skipped/>
  </testcase> <!-- check_CustomerPrivacyPolicy_Link -->
  <testcase classname="testCases.register" name="register_With_ValidData" time="0.002">
    <skipped/>
  </testcase> <!-- register_With_ValidData -->
  <testcase classname="testCases.register" name="EmptyFirstName" time="0.001">
    <skipped/>
  </testcase> <!-- EmptyFirstName -->
  <testcase classname="testCases.register" name="EmptyLastName" time="0.002">
    <skipped/>
  </testcase> <!-- EmptyLastName -->
  <testcase classname="testCases.register" name="EmptyEmail" time="0.003">
    <skipped/>
  </testcase> <!-- EmptyEmail -->
  <testcase classname="testCases.register" name="TakenEmail" time="0.002">
    <skipped/>
  </testcase> <!-- TakenEmail -->
  <testcase classname="testCases.register" name="InvalidEmail" time="0.001">
    <skipped/>
  </testcase> <!-- InvalidEmail -->
  <testcase classname="testCases.register" name="Emptypassword" time="0.002">
    <skipped/>
  </testcase> <!-- Emptypassword -->
  <testcase classname="testCases.register" name="Invalidpassword" time="0.002">
    <skipped/>
  </testcase> <!-- Invalidpassword -->
  <testcase classname="testCases.register" name="signUpWithFacbook" time="0.001">
    <skipped/>
  </testcase> <!-- signUpWithFacbook -->
  <testcase classname="testCases.register" name="signUpWithLinkedin" time="0.001">
    <skipped/>
  </testcase> <!-- signUpWithLinkedin -->
  <testcase classname="testCases.register" name="signUpWithGmail" time="0.001">
    <skipped/>
  </testcase> <!-- signUpWithGmail -->
  <testcase classname="testCases.loginTest" name="checkLogo" time="0.001">
    <skipped/>
  </testcase> <!-- checkLogo -->
  <testcase classname="testCases.loginTest" name="checktitle" time="0.001">
    <skipped/>
  </testcase> <!-- checktitle -->
  <testcase classname="testCases.loginTest" name="checkurl" time="0.001">
    <skipped/>
  </testcase> <!-- checkurl -->
  <testcase classname="testCases.loginTest" name="checkSininLink" time="0.001">
    <failure type="org.testng.TestNGException" message="
The data provider is trying to pass 0 parameters but the method testCases.loginTest#checkSininLink takes 1 and TestNG is unable in inject a suitable object">
      <![CDATA[org.testng.TestNGException: 
The data provider is trying to pass 0 parameters but the method testCases.loginTest#checkSininLink takes 1 and TestNG is unable in inject a suitable object
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 0 out of bounds for length 0
	... 17 more
... Removed 19 stack frames]]>
    </failure>
  </testcase> <!-- checkSininLink -->
  <testcase classname="testCases.loginTest" name="checkForgotPasswordLink" time="0.001">
    <skipped/>
  </testcase> <!-- checkForgotPasswordLink -->
  <testcase classname="testCases.loginTest" name="checkLinkedinLogin" time="0.001">
    <skipped/>
  </testcase> <!-- checkLinkedinLogin -->
  <testcase classname="testCases.loginTest" name="checkFacebookLogin" time="0.001">
    <skipped/>
  </testcase> <!-- checkFacebookLogin -->
  <testcase classname="testCases.loginTest" name="checkGmailLogin" time="0.001">
    <skipped/>
  </testcase> <!-- checkGmailLogin -->
  <testcase classname="testCases.loginTest" name="loginTestCase" time="0.001">
    <skipped/>
  </testcase> <!-- loginTestCase -->
  <testcase classname="testCases.loginTest" name="loginTestCase" time="0.001">
    <skipped/>
  </testcase> <!-- loginTestCase -->
  <testcase classname="testCases.loginTest" name="loginTestCase" time="0.0">
    <skipped/>
  </testcase> <!-- loginTestCase -->
  <testcase classname="testCases.homepageTest" name="checklogo" time="0.001">
    <skipped/>
  </testcase> <!-- checklogo -->
  <testcase classname="testCases.homepageTest" name="checktitle" time="0.0">
    <skipped/>
  </testcase> <!-- checktitle -->
  <testcase classname="testCases.homepageTest" name="checkurl" time="0.0">
    <skipped/>
  </testcase> <!-- checkurl -->
  <testcase classname="testCases.homepageTest" name="SigninLink" time="0.001">
    <skipped/>
  </testcase> <!-- SigninLink -->
  <testcase classname="testCases.homepageTest" name="checkAllCourseslink" time="0.0">
    <skipped/>
  </testcase> <!-- checkAllCourseslink -->
  <testcase classname="testCases.homepageTest" name="ReactAndNodejsCourse" time="0.001">
    <skipped/>
  </testcase> <!-- ReactAndNodejsCourse -->
  <testcase classname="testCases.homepageTest" name="NodejsAndCypressCourse" time="0.001">
    <skipped/>
  </testcase> <!-- NodejsAndCypressCourse -->
  <testcase classname="testCases.homepageTest" name="SeleniumJavaCourse" time="0.001">
    <skipped/>
  </testcase> <!-- SeleniumJavaCourse -->
  <testcase classname="testCases.homepageTest" name="JavaSdkCourse" time="0.001">
    <skipped/>
  </testcase> <!-- JavaSdkCourse -->
  <testcase classname="testCases.homepageTest" name="previousPageSign" time="0.001">
    <skipped/>
  </testcase> <!-- previousPageSign -->
  <testcase classname="testCases.homepageTest" name="nextPageSign" time="0.001">
    <skipped/>
  </testcase> <!-- nextPageSign -->
  <testcase classname="testCases.homepageTest" name="Gotopage1" time="0.0">
    <skipped/>
  </testcase> <!-- Gotopage1 -->
  <testcase classname="testCases.homepageTest" name="Gotopage2" time="0.0">
    <skipped/>
  </testcase> <!-- Gotopage2 -->
  <testcase classname="testCases.homepageTest" name="Gotopage3" time="0.0">
    <skipped/>
  </testcase> <!-- Gotopage3 -->
  <testcase classname="testCases.homepageTest" name="searchForSpecificItem" time="0.001">
    <skipped/>
  </testcase> <!-- searchForSpecificItem -->
  <testcase classname="testCases.homepageTest" name="searchMultipleItems" time="0.001">
    <skipped/>
  </testcase> <!-- searchMultipleItems -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="CheckTitle" time="0.001">
    <skipped/>
  </testcase> <!-- CheckTitle -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="CheckUrl" time="0.001">
    <skipped/>
  </testcase> <!-- CheckUrl -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="checkLogo" time="0.001">
    <skipped/>
  </testcase> <!-- checkLogo -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="MyDashboard" time="0.001">
    <skipped/>
  </testcase> <!-- MyDashboard -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="MyAccountLink" time="0.0">
    <skipped/>
  </testcase> <!-- MyAccountLink -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="MyDashboardLink" time="0.001">
    <skipped/>
  </testcase> <!-- MyDashboardLink -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="SupportLink" time="0.001">
    <skipped/>
  </testcase> <!-- SupportLink -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="ShowChapter1Content" time="0.001">
    <skipped/>
  </testcase> <!-- ShowChapter1Content -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="ShowChapter2Content" time="0.0">
    <skipped/>
  </testcase> <!-- ShowChapter2Content -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="ShowChapter3Content" time="0.0">
    <skipped/>
  </testcase> <!-- ShowChapter3Content -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="ShowChapter4Content" time="0.001">
    <skipped/>
  </testcase> <!-- ShowChapter4Content -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="ShowChapter5Content" time="0.001">
    <skipped/>
  </testcase> <!-- ShowChapter5Content -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="ShowChapter6Content" time="0.001">
    <skipped/>
  </testcase> <!-- ShowChapter6Content -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="GetStarted" time="0.001">
    <skipped/>
  </testcase> <!-- GetStarted -->
  <testcase classname="testCases.ReactAndNodejsCourseTest" name="SignOut" time="0.0">
    <skipped/>
  </testcase> <!-- SignOut -->
</testsuite> <!-- Test -->
